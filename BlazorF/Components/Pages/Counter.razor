@page "/counter"
@using BlazorF.ApiFilm.Models
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>

<style>
    .form-control:focus {
    border-color: #1E90FF;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    .btn-primary {
    background-color: #1E90FF;
    border-color: #1E90FF;
    }

    .btn-primary:hover {
    background-color: #87CEFA;
    border-color: #87CEFA;
    }

    .card {
    border: none;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .btn-link {

    border-color: white;
    color: black;

    }

    .btn-link:hover {
    text-decoration: underline;
    }

</style>

<div class="container mt-5" style="max-width: 700px;">
    <h4 class="text-center mb-4">Авторизация</h4>
    <div class="card">
        <div class="card-body">
            <EditForm Model="loginUser" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <div class="form-group mb-3">
                    <label for="email">Email</label>
                    <InputText @bind-Value="loginUser.Email" id="email" placeholder="Введите ваш email" class="form-control" />
                </div>

                <div class="form-group mb-3">
                    <label for="password">Пароль</label>
                    <InputText @bind-Value="loginUser.Password" id="password" type="password" placeholder="Введите пароль" class="form-control" />
                </div>

                <button type="submit" class="btn btn-primary w-100">Войти</button> <!-- Растянутая кнопка -->
            </EditForm>
        </div>
    </div>

    <div class="text-center mt-4">
        <NavLink href="/register" class="btn btn-link">Еще не зарегистрированы? Регистрация</NavLink>
    </div>
</div>

@code {
    private User loginUser = new User();
    public static User idU;
    public int idS;
    private LoginRequest loginRequest = new LoginRequest();
    private User currentUser;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/User/authentication", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();

                if (!string.IsNullOrEmpty(authResponse?.Token))
                {
                    // Сохраняем токен
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", authResponse.Token);

                    // Получаем информацию о пользователе
                    var userResponse = await Http.GetFromJsonAsync<User>($"api/User/by-email/{loginRequest.Email}");

                    if (userResponse != null)
                    {
                        currentUser = userResponse;
                        await JS.InvokeVoidAsync("localStorage.setItem", "currentUser", JsonSerializer.Serialize(userResponse));

                        await ShowAlert("Вы успешно авторизовались!");

                        NavigationManager.NavigateTo(userResponse.Role == "Admin" ? "/admin" : "/profile");
                    }
                }
            }
            else
            {
                await ShowAlert("Неверный email или пароль!");
            }
        }
        catch (Exception ex)
        {
            await ShowAlert($"Ошибка: {ex.Message}");
        }
    }

    private async Task ShowAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }
}